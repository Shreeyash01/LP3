// SPDX-License-Identifier: UNLICENSED 
pragma solidity ^0.8.0;

contract Bank {
    mapping(address => uint) public balances;
    mapping(address => bool) public accountExists;

    function createAccount() public {
        require(!accountExists[msg.sender], "Account already exists");
        accountExists[msg.sender] = true;
    }

    function deposit() public payable {
        require(accountExists[msg.sender], "Account does not exist");
        require(msg.value > 0, "Deposit value should be greater than zero");
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint amount) public {
        require(accountExists[msg.sender], "Account does not exist");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        require(amount > 0, "Withdrawal amount should be greater than zero");

        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
    }

    function showBalance() public view returns (uint) {
        return balances[msg.sender];
    }

    function transfer(address to, uint amount) public {
        require(accountExists[msg.sender], "Sender account does not exist");
        require(accountExists[to], "Receiver account does not exist");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        require(amount > 0, "Transfer amount should be greater than zero");

        balances[msg.sender] -= amount;
        balances[to] += amount;
    }

    function accountExist() public view returns (bool) {
        return accountExists[msg.sender];
    }
}
